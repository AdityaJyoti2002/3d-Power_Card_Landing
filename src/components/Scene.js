/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 powercard.gltf 
*/

import React, {  useLayoutEffect, useState, useEffect } from "react";
import { useGLTF } from '@react-three/drei'
import gsap from "gsap";
import { useThree } from "@react-three/fiber";

export function Model(props) {
  const { nodes, materials } = useGLTF('/powercard.compressed.gltf');
    let camera = useThree((state) => state.camera);
    let scene = useThree((state) => state.scene);
  
    // State to track window width
    const [windowWidth, setWindowWidth] = useState(window.innerWidth);
  
    useEffect(() => {
      const handleResize = () => {
        setWindowWidth(window.innerWidth);
      };
  
      window.addEventListener("resize", handleResize);
      return () => window.removeEventListener("resize", handleResize);
    }, []);
  
    useLayoutEffect(() => {
      camera.position.set(0, 2, 6);
      console.log("Loaded materials:", materials);
      materials['Clean silver(Shiny Metal)0'].color.set("#9BB5CE");

  
  
      let fov = (1400 * 18) / windowWidth;
      camera.fov = fov;
      camera.updateProjectionMatrix();
  
      let mm = gsap.matchMedia();
  
      mm.add(
        {
          isDesktop: `(min-width: 48em)`,
          isMobile: `(max-width:48em)`,
        },
        (context) => {
          let { isDesktop, isMobile } = context.conditions;
  
          let t1 = gsap.timeline({
            scrollTrigger: {
              trigger: "#phone-model",
              start: "top+=200 top",
              endTrigger: "#battery",
              end: "top top",
              scrub: 1,
            },
          });
  
          t1.fromTo(camera.position, { y: 2 }, { y: 0 })
            .to(scene.rotation, { y: 0.8 })
            .to(scene.rotation, { y: 3 })
            .to(scene.rotation, { z: 1.58 }, "key1")
            .to(camera.position, { z: 4 }, "key1")
            .to(scene.rotation, { y: 0, z: 0 }, "key2")
            .to(camera.position, { z: 6, x: isDesktop ? -1 : 0 }, "key2")
            .to(scene.rotation, { z: 0, y: 6.3 }, "key3")
            .to(camera.position, { x: isDesktop ? 0.8 : 0, y: 0 }, "key3");
  
          if (isMobile) {
            camera.fov = 20;
            camera.updateProjectionMatrix();
          }
  
          return () => {
            if (t1) t1.kill();
          };
        }
      );
    }, [camera, scene, materials, windowWidth]);
  return (
    <group {...props} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]} scale={1.667}>
      <group rotation={[Math.PI / 2, 0, 0]} scale={0.04}>
      <mesh geometry={nodes.Plane.geometry} material={materials['Clean silver(Shiny Metal)0']} />
      <mesh geometry={nodes.Plane_1.geometry} material={materials['Plain Grey Flat1']} />
      <mesh geometry={nodes.Plane001.geometry} material={materials['Plain Grey Flat1']} />
      <mesh geometry={nodes.Cube004.geometry} material={materials['Aluminium sand4']} />
      <mesh geometry={nodes.Plane002.geometry} material={materials['Soft Black Fabric5']} />
      <mesh geometry={nodes.Cylinder001.geometry} material={materials['Clean silver(Shiny Metal)0']} />
      <mesh geometry={nodes.Plane005.geometry} material={materials['Material.0066']} />
      <mesh geometry={nodes.Plane008.geometry} material={materials['Material.0057']} />
      <mesh geometry={nodes.BY_LAST_MINUTES.geometry} material={materials['BY LAST MINUTES8']} />
      <mesh geometry={nodes.Cube003.geometry} material={materials['PlÃ¡stico fosco 19']} />
      <mesh geometry={nodes.Cube003_1.geometry} material={materials['Metal ouro10']} />
      <mesh geometry={nodes.Cube.geometry} material={materials.Aluminum11} />
      <mesh geometry={nodes['5v_Bluetooth_Module'].geometry} material={materials['Black Coating12']} />
      <mesh geometry={nodes['5v_Bluetooth_Module_1'].geometry} material={materials.Metal13} />
      <mesh geometry={nodes['5v_Bluetooth_Module_2'].geometry} material={materials['PCB Top.00114']} />
      <mesh geometry={nodes['5v_Bluetooth_Module_3'].geometry} material={materials['Black Coating12']} />
      <mesh geometry={nodes['5v_Bluetooth_Module_4'].geometry} material={materials['PCB Side16']} />
      <mesh geometry={nodes['5v_Bluetooth_Module_5'].geometry} material={materials['Material.0057']} />
      </group>
      </group>
    </group>
  )
}

useGLTF.preload('/powercard.compressed.gltf')
